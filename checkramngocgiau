repeat wait() until game:IsLoaded()
repeat
                    wait()
                until game:GetService("Players").LocalPlayer:FindFirstChild("DataLoaded")
                repeat
                    wait()
                    pcall(
                        function()
                            for i, v in pairs(
                                getconnections(
                                    game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Activated
                                )
                            ) do
                                v.Function()
                            end
                        end
                    )
                until not game:GetService("Players").LocalPlayer.PlayerGui.Main:FindFirstChild("ChooseTeam")
local a = [[ local Account = {} Account.__index = Account

    local WebserverSettings = {
        Port = '7963',
        Password = ''
    }

    function WebserverSettings:SetPort(Port) self.Port = Port end
    function WebserverSettings:SetPassword(Password) self.Password = Password end

    local HttpService = game:GetService'HttpService'
    local Request = (syn and syn.request) or request or (http and http.request) or http_request

    local function GET(Method, Account, ...)
        local Arguments = {...}
        local Url = 'http://localhost:' .. WebserverSettings.Port .. '/' .. Method .. '?Account=' .. Account

        for Index, Parameter in pairs(Arguments) do
            Url = Url .. '&' .. Parameter
        end

        if WebserverSettings.Password and #WebserverSettings.Password >= 6 then
            Url = Url .. '&Password=' .. WebserverSettings.Password
        end
        
        local Response = Request {
            Method = 'GET',
            Url = Url
        }

        if Response.StatusCode ~= 200 then return false end

        return Response.Body
    end

    local function POST(Method, Account, Body, ...)
        local Arguments = {...}
        local Url = 'http://localhost:' .. WebserverSettings.Port .. '/' .. Method .. '?Account=' .. Account

        for Index, Parameter in pairs(Arguments) do
            Url = '&' .. Url .. Parameter
        end

        if WebserverSettings.Password and #WebserverSettings.Password >= 6 then
            Url = Url .. '&Password=' .. WebserverSettings.Password
        end
        
        local Response = Request {
            Method = 'POST',
            Url = Url,
            Body = Body
        }

        if Response.StatusCode ~= 200 then return false end

        return Response.Body
    end

    function Account.new(Username, SkipValidation)
        local self = {} setmetatable(self, Account)

        local IsValid = SkipValidation or GET('GetCSRFToken', Username)

        if not IsValid or IsValid == 'Invalid Account' then return false end

        self.Username = Username

        return self
    end

    function Account:GetCSRFToken() return GET('GetCSRFToken', self.Username) end

    function Account:BlockUser(Argument)
        if typeof(Argument) == 'string' then
            return GET('BlockUser', self.Username, 'UserId=' .. Argument)
        elseif typeof(Argument) == 'Instance' and Argument:IsA'Player' then
            return self:BlockUser(tostring(Argument.UserId))
        elseif typeof(Argument) == 'number' then
            return self:BlockUser(tostring(Argument))
        end
    end
    function Account:UnblockUser(Argument)
        if typeof(Argument) == 'string' then
            return GET('UnblockUser', self.Username, 'UserId=' .. Argument)
        elseif typeof(Argument) == 'Instance' and Argument:IsA'Player' then
            return self:BlockUser(tostring(Argument.UserId))
        elseif typeof(Argument) == 'number' then
            return self:BlockUser(tostring(Argument))
        end
    end
    function Account:GetBlockedList() return GET('GetBlockedList', self.Username) end
    function Account:UnblockEveryone() return GET('UnblockEveryone', self.Username) end

    function Account:GetAlias() return GET('GetAlias', self.Username) end
    function Account:GetDescription() return GET('GetDescription', self.Username) end
    function Account:SetAlias(Alias) return POST('SetAlias', self.Username, Alias) end
    function Account:SetDescription(Description) return POST('SetDescription', self.Username, Description) end
    function Account:AppendDescription(Description) return POST('AppendDescription', self.Username, Description) end

    function Account:GetField(Field) return GET('GetField', self.Username, 'Field=' .. HttpService:UrlEncode(Field)) end
    function Account:SetField(Field, Value) return GET('SetField', self.Username, 'Field=' .. HttpService:UrlEncode(Field), 'Value=' .. HttpService:UrlEncode(tostring(Value))) end
    function Account:RemoveField(Field) return GET('RemoveField', self.Username, 'Field=' .. HttpService:UrlEncode(Field)) end

    function Account:SetServer(PlaceId, JobId) return GET('SetServer', self.Username, 'PlaceId=' .. PlaceId, 'JobId=' .. JobId) end
    function Account:SetRecommendedServer(PlaceId) return GET('SetServer', self.Username, 'PlaceId=' .. PlaceId) end

    function Account:ImportCookie(Token) return GET('ImportCookie', 'Cookie=' .. Token) end
    function Account:GetCookie() return GET('GetCookie', self.Username) end
    function Account:LaunchAccount(PlaceId, JobId, FollowUser, JoinVip) -- if you want to follow someone, PlaceId must be their user id
        return GET('LaunchAccount', self.Username, 'PlaceId=' .. PlaceId, JobId and ('JobId=' .. JobId), FollowUser and 'FollowUser=true', JoinVip and 'JoinVIP=true')
    end

    return Account, WebserverSettings]]
function checkitem(x)
local v93 = game:GetService("Players").LocalPlayer.PlayerGui.Main.InventoryContainer.Right.Content.ScrollingFrame.Frame["1"]
                for i,v in next,getupvalues(require(game:GetService("Players").LocalPlayer.PlayerGui.Main.UIController.Inventory).UpdateRender) do
                    if i == 4 then
                        for i1,v1 in next, v do
                            if v1.details.Type ~= "Blox Fruit" and v1.details.Name == x then
                                return true
                         
                            end end end end end
local CommF = game.ReplicatedStorage.Remotes.CommF_
    local RAMAccount = loadstring(a)()
        MyAccount = RAMAccount.new(game:GetService "Players".LocalPlayer.Name)
        spawn(
                        function()
                          while wait() do 
                                
                                        Sea = {[7449423635] = "3",[4442272183] = "2",[2753915549] = "1"}
                                        sphm = ""
                                        deathstep = ""
                                        sharkman = "" 
                                        elec = ""
                                        talon = ""
                                        sphm2 = ""
                                        cdk = ""
                                        sgt =""
                                        god = ''
                                        mythic =""
                                        awk=""
                                            if CommF:InvokeServer("BuyGodhuman", true) ==1 then 
                                                sphm = "GodHuman,"
                                                god = '|GOD'
                                            else 
                                                sphm = "SuperHuman,"
                                               
                                            end 
                                        
                                        if CommF:InvokeServer("BuyDeathStep", true) ==1  then 
                                            deathstep ="DeathStep,"
                                        end 
                                        if CommF:InvokeServer("BuySharkmanKarate", true) ==1  then 
                                            sharkman ="SharkmanKarate,"
                                        end 
                                        if CommF:InvokeServer("BuyElectricClaw", true) ==1  then
                                            elec = "ElectricClaw,"  
                                        end 
                                        if  CommF:InvokeServer("BuyDragonTalon", true) == 1  then 
                                            talon ="DragonTalon,"
                                        end 

                                        melee =deathstep..sharkman..elec..talon
                                    
                                       
                                        dfstorage = ""
                                        for i, v in pairs(
                                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventoryFruits")
                                        ) do
                                            if v['Price']>=1000000 then 
                                                dfstorage = dfstorage..v['Name']:gsub("-(.*)","")..", "
                                            end
                                              

                                        end
                                        if checkitem("Cursed Dual Katana") then 
                                            cdk = "|CDK"
                                        end 
                                        if checkitem("Soul Guitar") then 
                                            sgt = "|SGT"
                                        end 
                                        
                                        getdata = function(data)
                return CommF:InvokeServer(data)
            end
        
          
        
            pcall(function()
                for i, v in pairs(getdata('getAwakenedAbilities')) do
                    if v.Awakened then
                       
                        awk = awk..v.Key..", "
                    end
                end
            end)
        local v93 = game:GetService("Players").LocalPlayer.PlayerGui.Main.InventoryContainer.Right.Content.ScrollingFrame.Frame["1"]
                for i,v in next,getupvalues(require(game:GetService("Players").LocalPlayer.PlayerGui.Main.UIController.Inventory).UpdateRender) do
                    if i == 4 then
                        for i1,v1 in next, v do
                            if v1.details.Type =="Sword" and v1.details.Rarity == 4 or v1.details.Type == "Gun" and v1.details.Rarity == 4 then
                                mythic=mythic ..v1.details.Name..", "
                         
                            end end end end
                                        MyAccount:SetAlias(game.Players.LocalPlayer.Data.Level.Value..god..cdk..sgt)
                                        MyAccount:SetDescription("Sea:"..Sea[game.PlaceId].."\nFragment:"..game.Players.LocalPlayer.Data.Fragments.Value.."\nAwaken:"..awk.."\nMeleeV2:"..melee.."\nDF:"..dfstorage.."\nMythic:"..mythic)
                            wait(60*5)
                               
                                end 
                           
                        end
                    )
